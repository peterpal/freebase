/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package sk.stuba.fiit.freebase.hadoop;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Triplet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Triplet\",\"namespace\":\"sk.stuba.fiit.freebase.hadoop\",\"fields\":[{\"name\":\"subject\",\"type\":\"string\"},{\"name\":\"predicat\",\"type\":\"string\"},{\"name\":\"object\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence subject;
  @Deprecated public java.lang.CharSequence predicat;
  @Deprecated public java.lang.CharSequence object;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Triplet() {}

  /**
   * All-args constructor.
   */
  public Triplet(java.lang.CharSequence subject, java.lang.CharSequence predicat, java.lang.CharSequence object) {
    this.subject = subject;
    this.predicat = predicat;
    this.object = object;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return subject;
    case 1: return predicat;
    case 2: return object;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: subject = (java.lang.CharSequence)value$; break;
    case 1: predicat = (java.lang.CharSequence)value$; break;
    case 2: object = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'subject' field.
   */
  public java.lang.CharSequence getSubject() {
    return subject;
  }

  /**
   * Sets the value of the 'subject' field.
   * @param value the value to set.
   */
  public void setSubject(java.lang.CharSequence value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'predicat' field.
   */
  public java.lang.CharSequence getPredicat() {
    return predicat;
  }

  /**
   * Sets the value of the 'predicat' field.
   * @param value the value to set.
   */
  public void setPredicat(java.lang.CharSequence value) {
    this.predicat = value;
  }

  /**
   * Gets the value of the 'object' field.
   */
  public java.lang.CharSequence getObject() {
    return object;
  }

  /**
   * Sets the value of the 'object' field.
   * @param value the value to set.
   */
  public void setObject(java.lang.CharSequence value) {
    this.object = value;
  }

  /** Creates a new Triplet RecordBuilder */
  public static sk.stuba.fiit.freebase.hadoop.Triplet.Builder newBuilder() {
    return new sk.stuba.fiit.freebase.hadoop.Triplet.Builder();
  }
  
  /** Creates a new Triplet RecordBuilder by copying an existing Builder */
  public static sk.stuba.fiit.freebase.hadoop.Triplet.Builder newBuilder(sk.stuba.fiit.freebase.hadoop.Triplet.Builder other) {
    return new sk.stuba.fiit.freebase.hadoop.Triplet.Builder(other);
  }
  
  /** Creates a new Triplet RecordBuilder by copying an existing Triplet instance */
  public static sk.stuba.fiit.freebase.hadoop.Triplet.Builder newBuilder(sk.stuba.fiit.freebase.hadoop.Triplet other) {
    return new sk.stuba.fiit.freebase.hadoop.Triplet.Builder(other);
  }
  
  /**
   * RecordBuilder for Triplet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Triplet>
    implements org.apache.avro.data.RecordBuilder<Triplet> {

    private java.lang.CharSequence subject;
    private java.lang.CharSequence predicat;
    private java.lang.CharSequence object;

    /** Creates a new Builder */
    private Builder() {
      super(sk.stuba.fiit.freebase.hadoop.Triplet.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(sk.stuba.fiit.freebase.hadoop.Triplet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.subject)) {
        this.subject = data().deepCopy(fields()[0].schema(), other.subject);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.predicat)) {
        this.predicat = data().deepCopy(fields()[1].schema(), other.predicat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.object)) {
        this.object = data().deepCopy(fields()[2].schema(), other.object);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Triplet instance */
    private Builder(sk.stuba.fiit.freebase.hadoop.Triplet other) {
            super(sk.stuba.fiit.freebase.hadoop.Triplet.SCHEMA$);
      if (isValidValue(fields()[0], other.subject)) {
        this.subject = data().deepCopy(fields()[0].schema(), other.subject);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.predicat)) {
        this.predicat = data().deepCopy(fields()[1].schema(), other.predicat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.object)) {
        this.object = data().deepCopy(fields()[2].schema(), other.object);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'subject' field */
    public java.lang.CharSequence getSubject() {
      return subject;
    }
    
    /** Sets the value of the 'subject' field */
    public sk.stuba.fiit.freebase.hadoop.Triplet.Builder setSubject(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.subject = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'subject' field has been set */
    public boolean hasSubject() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'subject' field */
    public sk.stuba.fiit.freebase.hadoop.Triplet.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'predicat' field */
    public java.lang.CharSequence getPredicat() {
      return predicat;
    }
    
    /** Sets the value of the 'predicat' field */
    public sk.stuba.fiit.freebase.hadoop.Triplet.Builder setPredicat(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.predicat = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'predicat' field has been set */
    public boolean hasPredicat() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'predicat' field */
    public sk.stuba.fiit.freebase.hadoop.Triplet.Builder clearPredicat() {
      predicat = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'object' field */
    public java.lang.CharSequence getObject() {
      return object;
    }
    
    /** Sets the value of the 'object' field */
    public sk.stuba.fiit.freebase.hadoop.Triplet.Builder setObject(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.object = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'object' field has been set */
    public boolean hasObject() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'object' field */
    public sk.stuba.fiit.freebase.hadoop.Triplet.Builder clearObject() {
      object = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Triplet build() {
      try {
        Triplet record = new Triplet();
        record.subject = fieldSetFlags()[0] ? this.subject : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.predicat = fieldSetFlags()[1] ? this.predicat : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.object = fieldSetFlags()[2] ? this.object : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
