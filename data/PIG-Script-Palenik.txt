REGISTER json-simple-1.1.1.jar
REGISTER avro-1.7.4.jar
REGISTER piggybank.jar


STOCK_A = LOAD 'SA1.txt' using PigStorage('') AS (subjectchararray, predicatechararray, objectchararray);

RESULT = FILTER STOCK_A BY ((predicate matches '.alias.') AND (object matches '.@en.')) OR (predicate matches '.type.object.type.') OR ((predicate matches '.type.object.name.') AND (object matches '.@en.'));

RESULTT = FOREACH STOCK_A GENERATE
FILTER STOCK_A BY(predicate matches '.alias.') AS alias,
FILTER STOCK_A BY(predicate matches '.type.object.type.')AS type,  
FILTER STOCK_A BY(predicate matches '.type.object.name.')AS name;

DUMP RESULT

RESULT_A = FOREACH RESULT GENERATE 
SUBSTRING(subject,INDEXOF(subject,'ns',0)+3,(int)SIZE(subject)) AS subject, 
SUBSTRING(predicate,INDEXOF(predicate,'u002E',38)+1,(int)SIZE(predicate))AS predicate, 
SUBSTRING(REPLACE(object,'@en.',''),INDEXOF(object,'ns',0)+3,(int)SIZE(REPLACE(object,'@en.','')))AS object;

ALIAS = FILTER RESULT_A BY (predicate matches '.alias.');
AlIAS_F = FOREACH ALIAS GENERATE subject,object AS alias;

dataA = GROUP AlIAS_F by subject;

dataA1 = FOREACH dataA{
                       alias_column = FOREACH AlIAS_F generate alias;
                       GENERATE group as subject, alias_column as alias;
}

TYPE = FILTER RESULT_A BY (predicate matches '.type.');
TYPE_F = FOREACH TYPE GENERATE subject,object AS type;

dataT = GROUP TYPE_F by subject;

dataT1 = FOREACH dataT{
                       type_column = FOREACH TYPE_F generate type;
                       GENERATE group as subject, type_column as type;
}

TITLE = FILTER RESULT_A BY (predicate matches '.name.');
TITLE_F = FOREACH TITLE GENERATE subject,object AS name;

dataR = GROUP TITLE_F by subject;

dataR1 = FOREACH dataR{
                       name_column = FOREACH TITLE_F generate name;
                       GENERATE group as subject, name_column as name;
}

ALLDATA1 = join dataA1 by subject FULL, dataT1 by subject;
ALLDATA2 = join ALLDATA1 by dataA1subject FULL, dataR1 by subject;

FINAL = FOREACH ALLDATA2 GENERATE 
dataR1subject AS ID,
ALLDATA1dataA1alias AS alias,
ALLDATA1dataT1type AS type,
dataR1name AS name;

DESCRIBE FINAL;
DUMP FINAL;

STORE FINAL  INTO 'VIFB_FIN' 
USING org.apache.pig.piggybank.storage.avro.AvroStorage(
'{schema {
		typerecord,
        nameFreebase,
        fields [
        	{nameID,typestring},
            {namealias,type [{typearray, itemsstring},null]},
        	{nametype,type [{typearray, itemsstring},null]},
            {namename,type [{typearray, itemsstring},null]}
        		]
             }
     }'
);
